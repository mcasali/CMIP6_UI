import { Directive, EventEmitter, Input, NgZone, Output } from '@angular/core';
import { Control, Draw, drawLocal } from 'leaflet';
import 'leaflet-draw';
import { LeafletDirective, LeafletDirectiveWrapper, LeafletUtil } from '@asymmetrik/ngx-leaflet';
import { LeafletDrawUtil } from './leaflet-draw.util';
var LeafletDrawDirective = /** @class */ (function () {
    function LeafletDrawDirective(leafletDirective, zone) {
        this.zone = zone;
        this.drawOptions = null;
        // Using 'any' here to avoid duplicating the DrawLocal interface with a bunch of optional properties
        this.drawLocal = null;
        // Configure callback function for the map
        this.drawReady = new EventEmitter();
        // Draw Events
        this.onDrawCreated = new EventEmitter();
        this.onDrawEdited = new EventEmitter();
        this.onDrawDeleted = new EventEmitter();
        this.onDrawStart = new EventEmitter();
        this.onDrawStop = new EventEmitter();
        this.onDrawVertex = new EventEmitter();
        this.onDrawEditStart = new EventEmitter();
        this.onDrawEditMove = new EventEmitter();
        this.onDrawEditResize = new EventEmitter();
        this.onDrawEditVertex = new EventEmitter();
        this.onDrawEditStop = new EventEmitter();
        this.onDrawDeleteStart = new EventEmitter();
        this.onDrawDeleteStop = new EventEmitter();
        this.onDrawToolbarOpened = new EventEmitter();
        this.onDrawToolbarClosed = new EventEmitter();
        this.onDrawMarkerContext = new EventEmitter();
        this.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);
    }
    LeafletDrawDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.leafletDirective.init();
        // Configure localization options
        if (null != this.drawLocal) {
            LeafletDrawUtil.deepLiteralCopy(drawLocal, this.drawLocal);
        }
        // Create the control
        this.drawControl = new Control.Draw(this.drawOptions);
        // Add the control to the map
        this.leafletDirective.getMap().addControl(this.drawControl);
        // Register the main handler for events coming from the draw plugin
        var map = this.leafletDirective.getMap();
        // add draw event pass throughs
        map.on(Draw.Event.CREATED, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawCreated, e); });
        map.on(Draw.Event.EDITED, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawEdited, e); });
        map.on(Draw.Event.DELETED, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawDeleted, e); });
        map.on(Draw.Event.DRAWSTART, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawStart, e); });
        map.on(Draw.Event.DRAWSTOP, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawStop, e); });
        map.on(Draw.Event.EDITSTART, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawEditStart, e); });
        map.on(Draw.Event.EDITMOVE, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawEditMove, e); });
        map.on(Draw.Event.EDITRESIZE, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawEditResize, e); });
        map.on(Draw.Event.EDITVERTEX, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawEditVertex, e); });
        map.on(Draw.Event.EDITSTOP, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawEditStop, e); });
        map.on(Draw.Event.DELETESTART, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawDeleteStart, e); });
        map.on(Draw.Event.DELETESTOP, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawDeleteStop, e); });
        map.on(Draw.Event.TOOLBAROPENED, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawToolbarOpened, e); });
        map.on(Draw.Event.TOOLBARCLOSED, function (e) { return LeafletUtil.handleEvent(_this.zone, _this.onDrawToolbarClosed, e); });
        // Notify others that the draw control has been created
        this.drawReady.emit(this.drawControl);
    };
    LeafletDrawDirective.prototype.ngOnDestroy = function () {
        this.leafletDirective.getMap().removeControl(this.drawControl);
    };
    LeafletDrawDirective.prototype.getDrawControl = function () {
        return this.drawControl;
    };
    LeafletDrawDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[leafletDraw]'
                },] }
    ];
    LeafletDrawDirective.ctorParameters = function () { return [
        { type: LeafletDirective },
        { type: NgZone }
    ]; };
    LeafletDrawDirective.propDecorators = {
        drawOptions: [{ type: Input, args: ['leafletDrawOptions',] }],
        drawLocal: [{ type: Input, args: ['leafletDrawLocal',] }],
        drawReady: [{ type: Output, args: ['leafletDrawReady',] }],
        onDrawCreated: [{ type: Output, args: ['leafletDrawCreated',] }],
        onDrawEdited: [{ type: Output, args: ['leafletDrawEdited',] }],
        onDrawDeleted: [{ type: Output, args: ['leafletDrawDeleted',] }],
        onDrawStart: [{ type: Output, args: ['leafletDrawStart',] }],
        onDrawStop: [{ type: Output, args: ['leafletDrawStop',] }],
        onDrawVertex: [{ type: Output, args: ['leafletDrawVertex',] }],
        onDrawEditStart: [{ type: Output, args: ['leafletDrawEditStart',] }],
        onDrawEditMove: [{ type: Output, args: ['leafletDrawEditMove',] }],
        onDrawEditResize: [{ type: Output, args: ['leafletDrawEditResize',] }],
        onDrawEditVertex: [{ type: Output, args: ['leafletDrawEditVertex',] }],
        onDrawEditStop: [{ type: Output, args: ['leafletDrawEditStop',] }],
        onDrawDeleteStart: [{ type: Output, args: ['leafletDrawDeleteStart',] }],
        onDrawDeleteStop: [{ type: Output, args: ['leafletDrawDeleteStop',] }],
        onDrawToolbarOpened: [{ type: Output, args: ['leafletDrawToolbarOpened',] }],
        onDrawToolbarClosed: [{ type: Output, args: ['leafletDrawToolbarClosed',] }],
        onDrawMarkerContext: [{ type: Output, args: ['leafletDrawMarkerContext',] }]
    };
    return LeafletDrawDirective;
}());
export { LeafletDrawDirective };
//# sourceMappingURL=leaflet-draw.directive.js.map